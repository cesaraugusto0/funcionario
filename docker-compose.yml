services:
  # Aplicação Spring Boot
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fucionario-app
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/dbfuncionario
      - SPRING_DATASOURCE_USERNAME=userfuncionario
      - SPRING_DATASOURCE_PASSWORD=senha123
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - MINIO_URL=http://minio:9000
      - MINIO_ACCESS_KEY=minioaccess
      - MINIO_SECRET_KEY=miniosecret
    depends_on:
      - db
      - minio
    networks:
      - app-network

  # Banco de dados PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: postgres-db
    environment:
      - POSTGRES_DB=dbfuncionario
      - POSTGRES_USER=userfuncionario
      - POSTGRES_PASSWORD=senha123
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U userfuncionario -d dbfuncionario"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Serviço Min.IO
  minio:
    image: minio/minio
    container_name: minio-storage
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioaccess
      - MINIO_ROOT_PASSWORD=miniosecret
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Console port
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

# Volumes para persistência de dados
volumes:
  postgres-data:
  minio-data:

# Rede personalizada para comunicação entre containers
networks:
  app-network:
    driver: bridge